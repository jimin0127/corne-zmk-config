#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LAYER1  1
#define LAYER2  2
#define LAYER3  3
#define LAYER4  4

#define COMBO_TIMEOUT 20
#define COMBO_PRIOR_IDLE 75

/ {
    combos {
        compatible = "zmk,combos";
        combo_grave {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <0 1>;
            bindings = <&kp GRAVE>;
        };

        combo_exclamation {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <1 2>;
            bindings = <&kp EXCLAMATION>;
        };

        combo_atsign {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <2 3>;
            bindings = <&kp AT_SIGN>;
        };

        combo_hash {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <3 4>;
            bindings = <&kp HASH>;
        };

        combo_dollar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <4 5>;
            bindings = <&kp DOLLAR>;
        };

        combo_percent {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <5 6>;
            bindings = <&kp PERCENT>;
        };

        combo_caret {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <6 7>;
            bindings = <&kp CARET>;
        };

        combo_ampersand {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <7 8>;
            bindings = <&kp AMPERSAND>;
        };

        combo_asterisk {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <8 9>;
            bindings = <&kp ASTERISK>;
        };

        combo_lpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <9 10>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        combo_rpar {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <10 11>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };

        combo_gui_option {
            timeout-ms = <COMBO_TIMEOUT>;
            key-positions = <36 37>;
            bindings = <&kp LG(LALT)>;
        };

        combo_ctrl_z {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <25 26>;
            bindings = <&kp LG(Z)>;
        };

        combo_ctrl_x {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <26 27>;
            bindings = <&kp LG(X)>;
        };

        combo_ctrl_c {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <27 28>;
            bindings = <&kp LG(C)>;
        };

        combo_ctrl_v {
            timeout-ms = <COMBO_TIMEOUT>;
            require-prior-idle-ms = <COMBO_PRIOR_IDLE>;
            key-positions = <28 29>;
            bindings = <&kp LG(V)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt ESC TAB         &kp Q  &kp W  &kp E     &kp R      &kp T       &kp Y     &kp U      &kp I      &kp O    &kp P     &kp BSPC
&mt LCTRL CAPSLOCK  &kp A  &kp S  &kp D     &kp F      &kp G       &kp H     &kp J      &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT           &kp Z  &kp X  &kp C     &kp V      &kp B       &kp N     &kp M      &kp COMMA  &kp DOT  &kp FSLH  &kp ENTER
                                  &kp LALT  &kp LGUI   &mo LAYER1  &kp SPACE &mo LAYER2 &mo LAYER3
            >;
        };

        layer_1 {
            bindings = <
&kp GRAVE  &kp N1    &kp N2     &kp N3        &kp N4        &kp N5              &kp N6     &kp N7      &kp N8     &kp N9    &kp N0      &kp BSLH
&trans     &trans    &trans     &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE          &kp LEFT   &kp N4      &kp N5     &kp N6    &kp C_MUTE  &kp C_PLAY_PAUSE
&trans     &trans    &trans     &kp C_PREV    &kp C_NEXT    &kp C_PLAY_PAUSE    &kp MINUS  &kp N1      &kp N2     &kp N3    &kp C_PREV  &kp C_NEXT
                                &trans        &trans        &trans              &trans     &mo LAYER4  &kp N0
            >;
        };

        layer_2 {
            bindings = <
&trans  &trans  &trans  &kp UNDER    &kp PLUS    &kp LPAR     &kp RPAR   &kp HOME   &kp UP     &kp END       &trans         &kp DEL
&trans  &trans  &trans  &kp EQUAL    &kp MINUS   &kp LBKT     &kp RBKT   &kp LEFT   &kp DOWN   &kp RIGHT     &kp C_BRI_UP   &kp C_VOL_UP
&trans  &trans  &trans  &trans       &trans      &kp LBRC     &kp RBRC   &trans     &trans     &trans        &kp C_BRI_DN   &kp C_VOL_DN
                        &trans       &mo LAYER4  &trans       &trans     &trans     &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F12    &kp F1   &kp F2  &kp F3   &kp F4   &kp F5    &kp F6     &kp F7   &kp F8   &kp F9    &kp F10   &kp F11
&trans     &trans   &trans  &trans   &trans   &trans    &trans     &trans   &trans   &trans    &trans    &trans
&trans     &trans   &trans  &trans   &trans   &trans    &trans     &trans   &trans   &trans    &trans    &trans
                            &trans   &trans   &trans    &trans     &trans   &trans
            >;
        };

        layer_4 {
            bindings = <
&trans     &trans   &trans  &trans   &trans   &trans    &trans     &trans   &trans   &trans    &trans      &trans
&trans     &trans   &trans  &trans   &trans   &trans    &trans     &trans   &trans   &trans    &trans      &bt BT_NXT
&trans     &trans   &trans  &trans   &trans   &trans    &trans     &trans   &trans   &trans    &bt BT_CLR  &bt BT_PRV
                            &trans   &trans   &trans    &trans     &trans   &trans
            >;
        };
    };
};

